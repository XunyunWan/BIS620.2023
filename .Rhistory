library(devtools)
document()
check()
library(pkgdown)
build_site_github_pages()
document()
check()\
check()
library(testthat)
test()
#' @export
spec_sig = spectral_signature
spec_sig
spec_sig()
spectral_signature()
check（）
check()
rm(list = c("spec_sig"))
document()
check()
accel.rda
view(accel)
load("data/calculated.rda")
View(calculated)
load("data/conditions.rda")
load("data/countries.rda")
load("data/sponsors.rda")
load("data/studies.rda")
View(countries)
View(studies)
View(studies)
View(calculated)
View(conditions)
View(sponsors)
document()
document()
check()
View(calculated)
document()
runShinyApp()
runShinyApp()
document()
library(bis620.2023)
studies
studies
runShinyApp()
document()
check()
document()
load("~/Desktop/bis620.2023/data/caculated.rda")
View(caculated1)
load("~/Desktop/bis620.2023/data/conditions.rda")
load("~/Desktop/bis620.2023/data/countries.rda")
load("~/Desktop/bis620.2023/data/calculated.rda")
load("~/Desktop/bis620.2023/data/calculated.rda")
View(caculated1)
load("~/Desktop/bis620.2023/data/calculated.rda")
document()
document()
load("~/Desktop/bis620.2023/data/studies.rda")
document()
load("~/Desktop/bis620.2023/data/calculated.rda")
load("~/Desktop/bis620.2023/data/accel.rda")
load("~/Desktop/bis620.2023/data/calculated.rda")
load("~/Desktop/bis620.2023/data/conditions.rda")
load("~/Desktop/bis620.2023/data/studies.rda")
document()
runShinyApp()
runShinyApp()
load("~/Desktop/bis620.2023/data/conditions.rda")
View(conditions)
load("~/Desktop/bis620.2023/data/studies.rda")
View(studies1)
load("~/Desktop/bis620.2023/data/conditions.rda")
library(bis620.2023)
studies1
check()
load("~/Desktop/bis620.2023/data/calculated.rda")
load("~/Desktop/bis620.2023/data/countries.rda")
load("~/Desktop/bis620.2023/data/sponsors.rda")
View(caculated1)
rownames(conditions)
colnames(conditions)
colnames(countries)
colnames(sponsors)
colnames(studies1)
document()
library(bis620.2023)
runShinyApp()
#'   \item \code{Brief title keywords}: Filters studies by title keywords.
#'   \item \code{Sponsor Types}: Filters studies by the type of sponsor.
#'   \item \code{Date Range}: Filters studies within a specified date range.
#'   \item \code{Age Range}: Filters studies by participant age range.
#'   \item \code{Lead or Collaborator}: Filters studies by the role of the sponsor.
#'   \item \code{Study Type}: Filters studies by the type of study.
#' }
#' The outputs include several plots (phase, concurrent studies, conditions, countries, and status) and a data table displaying the filtered studies.
#' @export
#'
runShinyApp <- function(){
max_num_studies <- 1000
studies = studies1
calculated = caculated1
conditions <- conditions %>%
group_by(nct_id) %>%
summarize(condition_name = str_flatten(downcase_name, ", "))
countries <- countries %>%
group_by(nct_id) %>%
summarize(country = str_flatten(name, ", "))
sponsors <- sponsors %>%
mutate(sponsor_name = name) %>%
select(-name)
calculated <- calculated %>%
group_by(nct_id) %>%
summarize(min_age = min(minimum_age_num, na.rm = TRUE),
max_age = max(maximum_age_num, na.rm = TRUE))
# Join the datasets
studies <- studies %>%
left_join(conditions, by = "nct_id") %>%
left_join(countries, by = "nct_id") %>%
left_join(sponsors, by = "nct_id") %>%
left_join(calculated, by = "nct_id")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Clinical Trials Query"),
sidebarLayout(
sidebarPanel(
textInput("brief_title_kw", "Brief title keywords"),
selectInput("source_class", label = h3("Sponsor Types"),
choices=list(
"Federal" = "FED",
"Individual" = "INDIV",
"Industry" = "INDUSTRY",
"Network" = "NETWORK", "NIH" = "NIH",
"Other" = "OTHER",
"Other gov" = "OTHER_GOV",
"Unknown" = "Unknown"),multiple = TRUE),
dateRangeInput("dates", label = h3("Date Range")),
sliderInput("slider", label = h3("Age Range"), min = 0,
max = 100, value = c(0, 100)),
checkboxGroupInput("sponsor", label = h3("Lead or Collaborator"),
choices = list("lead" = "lead", "collaborator" = "collaborator"),
),
checkboxGroupInput("study_type", label = h3("Study Type"),
choices = list("Interventional" = "Interventional",
"Expanded Access" = "Expanded Access",
"Observational" = "Observational",
"Observational [Patient Registry]" = "Observational [Patient Registry]"),
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Phase", plotOutput("phase_plot")),
tabPanel("Concurrent", plotOutput("concurrent_plot")),
tabPanel("Conditions", plotOutput("conditions_plot")),
tabPanel("Countries", plotOutput("countries_plot")),
tabPanel("Status", plotOutput("status_plot"))
),
dataTableOutput("trial_table")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
get_studies = reactive({
if (input$brief_title_kw != "") {
si = input$brief_title_kw |>
strsplit(",") |>
unlist() |>
trimws()
ret = query_kwds(studies, si, "brief_title", match_all = TRUE)
} else {
ret = studies
}
if(!is.null(input$source_class)){
ret = ret |> filter(source_class %in% !!input$source_class)
}
input_start <- input$dates[1]
input_end <- input$dates[2]
if(!is.null(input$dates)){
ret = ret |> filter(start_date <= input_start, completion_date >= input_end)
}
age_start <- input$slider[1]
age_end <- input$slider[2]
if(!is.null(input$slider2)){
ret = ret |> filter(min_age <= age_end | max_age >= age_start)
}
if(!is.null(input$sponsor)){
ret = ret |> filter(lead_or_collaborator %in% !!input$sponsor)
}
if(!is.null(input$study_type)){
ret = ret |> filter(study_type %in% !!input$study_type)
}
ret |>
head(max_num_studies) |>
collect()
})
output$phase_plot = renderPlot({
plot_phase_histogram(get_studies())
})
output$concurrent_plot = renderPlot({
get_studies() |>
plot_concurrent_studies()
})
output$conditions_plot = renderPlot({
get_studies() |>
plot_conditions_histogram()
})
output$countries_plot = renderPlot({
get_studies() |>
plot_countries_map()
})
output$status_plot = renderPlot({
get_studies() |>
plot_status_piechart()
})
output$trial_table = renderDataTable({
get_studies() |>
head(max_num_studies) |>
select(nct_id, brief_title, start_date, completion_date) |>
rename(`NCT ID` = nct_id, `Brief Title` = brief_title,
`Start Date` = start_date, `Completion Date` = completion_date)
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
View(runShinyApp)
runShinyApp()
runShinyApp()
View(studies1)
load("~/Desktop/bis620.2023/data/studies.rda")
View(studies)
load("~/Desktop/bis620.2023/data/studies.rda")
View(studies)
setwd("~/Desktop/bis620.2023/data")
load("calculated.rda")
load(studies)
load("studies.rda")
load("studies.rda")
calculated = caculated1
View(caculated1)
View(caculated1)
calculated = caculated1 |> select(-id)
save(calculated, file = "calculated.rds")
save(calculated, file = "calculated.rda")
colnames(studies1)
View(studies1)
View(studies)
View(studies1)
load("~/Desktop/bis620.2023/data/calculated.rda")
load("~/Desktop/bis620.2023/data/conditions.rda")
View(conditions)
View(conditions)
conditions = conditions |> select(nct_id, name)
save(conditions, file="conditions.rda")
load("~/Desktop/bis620.2023/data/conditions.rda")
load("~/Desktop/bis620.2023/data/countries.rda")
View(countries)
countries = countries |> select(nct_id, name)
save(countries, file = "countries.rda")
load("~/Desktop/bis620.2023/data/countries.rda")
load("~/Desktop/bis620.2023/data/conditions.rda")
View(conditions)
load("~/Desktop/bis620.2023/data/sponsors.rda")
View(sponsors)
View(sponsors)
sponsors = sponsors |> select(-id)
sponsors = sponsors |> select(-id)
save(sponsors, file = " sponsors.rda")
load("~/Desktop/bis620.2023/data/ sponsors.rda")
View(sponsors)
load("~/Desktop/bis620.2023/data/ sponsors.rda")
View(sponsors)
colnames(countries)
load("studies.rda")
studies = studies |> select("nct_id","source_class","overall_status","phase","start_date","study_type","brief_title","completion_date")
save(studies, file = "studies.rda")
document
document()
runShinyApp()
runShinyApp()
document()
runShinyApp()
load("~/Desktop/bis620.2023/data/conditions.rda")
View(conditions)
save(conditions|> select(-id), file = "conditions.rda")
conditions = conditions|> select(-id)
save(conditions, file = "conditions.rda")
document()
runShinyApp()
load("~/Desktop/bis620.2023/data/studies.rda")
View(studies)
runShinyApp()
setwd("~/Desktop/bis620.2023")
document
document()
?reactive()
?reactive()
??reactive()
library(bis620.2023)
library(devtools)
document()
?plot_phase_histogram()
max_num_studies=1000
conditions <- conditions %>%
group_by(nct_id) %>%
summarize(condition_name = str_flatten(downcase_name, ", "))
countries <- countries %>%
group_by(nct_id) %>%
summarize(country = str_flatten(name, ", "))
sponsors <- sponsors %>%
mutate(sponsor_name = name) %>%
select(-name)
calculated <- calculated %>%
group_by(nct_id) %>%
summarize(min_age = min(minimum_age_num, na.rm = TRUE),
max_age = max(maximum_age_num, na.rm = TRUE))
max_num_studies=1000
conditions <- conditions %>%
group_by(nct_id) %>%
summarize(condition_name = str_flatten(downcase_name, ", "))
load("~/Desktop/bis620.2023/data/conditions.rda")
View(conditions)
conditions <- conditions %>%
group_by(nct_id) %>%
summarize(condition_name = str_flatten(downcase_name, ", "))
